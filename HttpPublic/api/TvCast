path='Setting\\HttpPublic.ini'
ffmpeg=edcb.GetPrivateProfile('SET','ffmpeg','Tools\\ffmpeg',path)
RecTask='RecTask.exe'

BonDr=mg.get_var(mg.request_info.query_string, 'BonDr')
onid=tonumber(mg.get_var(mg.request_info.query_string, 'onid') or 32736)
sid=tonumber(mg.get_var(mg.request_info.query_string, 'sid') or 1024)

if not BonDr then
  BonDr=((onid==4 or onid==6 or onid==7) and 'BonDriver_PT-S.dll' --BS
    or (0x7880<=onid and onid<=0x7FE8) and 'BonDriver_PT-T.dll' --地上波
    or '')
end

-- ローカルUDPポート1234～1243またはTCPポート22230～22239を転送するスクリプト

-- ffmpeg変換オプション
-- ※UDPの場合はローカルでの安定した送受信も求められるので、システムに余力を残して調整すべき
-- libvpxの例:リアルタイム変換と画質が両立するようにビットレート-bと計算量-cpu-usedを調整する
quality=mg.get_var(mg.request_info.query_string, 'quality')

if quality then
  XOPT=edcb.GetPrivateProfile('MOVIE',quality,'-vcodec libvpx -b 1800k -quality realtime -cpu-used 2 -vf yadif=0:-1:1  -s 960x540 -r 30000/1001 -acodec libvorbis -ab 128k -f webm -',path)
else
  XOPT=edcb.GetPrivateProfile('SET','ffmpegoption','-vcodec libvpx -b 896k -quality realtime -cpu-used 1 -vf yadif=0:-1:1 -s 512x288 -r 30000/1001 -acodec libvorbis -ab 128k -f webm -',path)
end
-- 変換後の拡張子
XEXT='.webm'
-- 転送開始前に変換しておく量(bytes)
XPREPARE=tonumber(edcb.GetPrivateProfile('SET','xprepare',48128,path))

n=math.floor(tonumber(mg.get_var(mg.request_info.query_string, 'n')) or 0)
if n<0 then
  -- プロセスが残っていたらすべて終わらせる
  edcb.os.execute('wmic process where "name=\'RecTask.exe\' and commandline like \'%%address 127.0.0.1 /port%%\'" call terminate >nul')
  edcb.os.execute('wmic process where "name=\'ffmpeg.exe\' and commandline like \'%%[ut][dc]p://127.0.0.1:[12][0-9][0-9][0-9]%%\'" call terminate >nul')
else
  proto=n>=10 and 'tcp' or 'udp'
  port=n>=10 and 22230+math.min(n-10, 9) or 1234+n
  -- 前回のプロセスが残っていたら終わらせる
  edcb.os.execute('wmic process where "name=\'RecTask.exe\' and commandline like \'%%address 127.0.0.1 /port '..port..'%%\'" call terminate >nul')
  edcb.os.execute('wmic process where "name=\'ffmpeg.exe\' and commandline like \'%%'..proto..'://127.0.0.1:'..port..'%%\'" call terminate >nul')
  r=edcb.io.popen('"'..RecTask..'" /d '..BonDr..' /sid '..sid..' /'..proto..' /address 127.0.0.1 /port '..port, 'rb')
  f=edcb.io.popen(
    ffmpeg..' -f mpegts -i "'..proto..'://127.0.0.1:'..port..'?timeout=4000000'..(
      proto=='tcp' and '&listen=1&recv_buffer_size=481280&listen_timeout=4000' or '&pkt_size=48128&fifo_size=100000&overrun_nonfatal=1'
    )..'" '..XOPT, 'rb')
  fname='view'..XEXT
end

if not f then
  mg.write('HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n')
else
  mg.write('HTTP/1.1 200 OK\r\nContent-Type: '..mg.get_mime_type(fname)..'\r\nContent-Disposition: filename='..fname..'\r\nConnection: close\r\n\r\n')
  while true do
    buf=f:read(XPREPARE or 48128)
    XPREPARE=nil
    if buf and #buf ~= 0 then
      if not mg.write(buf) then
        -- キャンセルされた
        edcb.os.execute('wmic process where "name=\'RecTask.exe\' and commandline like \'%%address 127.0.0.1 /port '..port..'%%\'" call terminate >nul')
        mg.cry('canceled')
        break
      end
    else
      -- 終端に達した
      mg.cry('end')
      break
    end
  end
  r:close()
  f:close()
end
